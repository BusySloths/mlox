# Reference: https://taskfile.dev
version: "3"

vars:
  GREETING: |
    \033[1;36mMLOX Taskfile (Developer)\033[0m

    MLOX helps you stand up opinionated MLOps infrastructure (MLflow, Feast,
    Milvus, telemetry) on your own servers and in hybrid setups. This Taskfile acts as a
    lightweight developer CLI to keep common actions consistent and repeatable.

    Key tasks
    - deps:lock             : compile base requirements from pyproject.toml
    - deps:lock:all|dev|gcp : compile extras to requirements-<extra>.txt
    - deps:install:tools    : install tools like Multipass for integration tests
    - tests:integration:run     : run integration tests (requires Multipass)
    - tests:integration:cleanup : clean up test Multipass VMs
    - docker:build        : build local Docker image

    Get started by following these steps:
    1) Install Task: https://taskfile.dev/installation
    2) Install Tools:  task deps:install:tools
    3) Run integration tests: task tests:integration:run
    4) Clean up test VMs: task tests:integration:cleanup

tasks:
  default:
    cmds:
      - printf "%b\n" "{{.GREETING}}"
    silent: true

  dev:lock:*:
    desc: Generate requirements.txt from extras (dev, all, gcp) in pyproject.toml
    vars:
      EXTRA: "{{index .MATCH 0}}"
    cmds:
      - '{{.PYTHON | default "python"}} -m pip install --upgrade pip-tools'
      - '{{.PYTHON | default "python"}} -m piptools compile pyproject.toml --extra {{.EXTRA}} --output-file requirements.gen.{{.EXTRA}}.txt'

  dev:lint:
    silent: true
    desc: Lint Python sources with flake8
    cmds:
      - |
        if ! {{.PYTHON | default "python"}} -c "import importlib.util,sys; sys.exit(0 if importlib.util.find_spec('flake8') else 1)"; then \
          printf '\n\033[1;31m✖ flake8 is not installed.\033[0m\n'; \
          printf 'Install dev deps first, e.g.: \033[1m{{.PYTHON | default "python"}} -m pip install -e .[dev]\033[0m\n\n'; \
          exit 1; \
        fi
      - '{{.PYTHON | default "python"}} -m flake8 mlox tests --max-line-length=128 --statistics --extend-ignore=E203,W503'

  dev:env:create:
    desc: Create a Conda dev environment with selected Python and install .[dev]
    vars:
      NAME: '{{.NAME | default "mlox-dev"}}'
      PY: '{{.PY | default "3.12.5"}}'
    cmds:
      - |
        if ! command -v conda >/dev/null 2>&1; then \
          printf '\n\033[1;31m✖ Conda not found.\033[0m\n'; \
          printf 'Please install Miniconda/Mamba and ensure `conda` is on PATH.\n\n'; \
          exit 1; \
        fi
      - |
        set -euo pipefail
        printf '\n\033[1;36m▶ Creating env\033[0m %s with Python %s\n' '{{.NAME}}' '{{.PY}}'
        conda create -y -n '{{.NAME}}' python='{{.PY}}'
        printf '\n\033[1;36m▶ Upgrading pip\033[0m in env %s\n' '{{.NAME}}'
        conda run -n '{{.NAME}}' python -m pip install --upgrade pip
        printf '\n\033[1;36m▶ Installing project (.[dev])\033[0m into env %s\n' '{{.NAME}}'
        conda run -n '{{.NAME}}' python -m pip install -e .[dev]
        printf '\n\033[1;36m▶ Verifying CLI import\033[0m\n'
        conda run -n '{{.NAME}}' python -c "import mlox.cli; print('mlox.cli OK')"
        printf '\n\033[1;32m✓ Environment ready:\033[0m activate with: \033[1mconda activate {{.NAME}}\033[0m\n'

  first:steps:
    aliases: [setup]
    desc: One-time setup — create dev env and show activation steps
    vars:
      NAME: '{{.NAME | default "mlox-dev"}}'
      PY: '{{.PY | default "3.12.5"}}'
    cmds:
      - task: dev:env:create
        vars:
          NAME: '{{.NAME}}'
          PY: '{{.PY}}'
      - |
        printf '\n\033[1;35m══════════════════════════════════════════════════════════\033[0m\n'
        printf '\033[1;35m   ✅ Next Steps\033[0m\n'
        printf '\033[1;35m══════════════════════════════════════════════════════════\033[0m\n'
        printf 'Activate your new environment:\n\n  \033[1mconda activate {{.NAME}}\033[0m\n\n'
        printf 'Run tests and linting (optional):\n\n  \033[1mtask tests:unit:run\033[0m\n  \033[1mtask dev:lint\033[0m\n\n'
        printf 'Start here anytime with:\n\n  \033[1mtask first:steps\033[0m  (alias: \033[1mtask setup\033[0m)\n\n'

  tests:unit:coverage:
    silent: true
    desc: Run unit tests with coverage (excludes integration)
    cmds:
      - |
        if ! {{.PYTHON | default "python"}} -c "import importlib.util,sys; sys.exit(0 if importlib.util.find_spec('pytest') and importlib.util.find_spec('coverage') else 1)"; then \
          printf '\n\033[1;31m✖ pytest/coverage not installed.\033[0m\n'; \
          printf 'Install dev deps, e.g.: \033[1m{{.PYTHON | default "python"}} -m pip install -e .[dev]\033[0m\n\n'; \
          exit 1; \
        fi
      - '{{.PYTHON | default "python"}} -m pytest -m "not integration" --cov=mlox --cov-report=term-missing'

  tests:unit:run:
    silent: true
    cmds:
      - pytest -m "not integration"
    desc: Run unit tests

  tests:integration:run:
    silent: true
    cmds:
      - |
        if ! command -v multipass >/dev/null 2>&1; then \
          printf '\n\033[1;31m✖ Multipass is not installed.\033[0m\n'; \
          printf 'Install it first. Run: \033[1mtask deps:install:tools\033[0m\n\n'; \
          exit 1; \
        fi
      - pytest -m integration --run-integration
    desc: Run integration tests

  tests:integration:cleanup:
    silent: true
    cmds:
      - printf '\n\033[1;36m══════════ ▶ BEFORE CLEANUP (Multipass VMs) ◀ ══════════\033[0m\n'; multipass list || true
      - multipass list | grep mlox-test- | cut -d' ' -f1 | xargs multipass delete $1 --purge
      - printf '\n\033[1;32m══════════ ✓ AFTER CLEANUP (Multipass VMs) ✓ ══════════\033[0m\n'; multipass list || true
    desc: Remove all Multipass VMs used for integration testing

  docker:build:
    cmds:
      - docker build -t mlox:latest .
    desc: Build the Docker image

  docker:mlox:up:
    cmds:
      - docker compose up -d --build
      - docker compose ps
      - docker compose logs -f --tail=10
    desc: Start MLOX UI locally with Docker Compose

  docker:mlox:down:
    cmds:
      - docker compose down
    desc: Stop MLOX UI

  vm:start:
    desc: Start one or more Multipass VMs with cloud-init
    vars:
      COUNT: '{{.COUNT | default "1"}}'
      CPUS: '{{.CPUS | default "2"}}'
      MEM: '{{.MEM | default "4G"}}'
      DISK: '{{.DISK | default "10G"}}'
      PREFIX: '{{.PREFIX | default "mlox-test"}}'
      CLOUD_INIT: '{{.CLOUD_INIT | default "cloud-init.yaml"}}'
    cmds:
      - |
        if ! command -v multipass >/dev/null 2>&1; then \
          printf '\n\033[1;31m✖ Multipass is not installed.\033[0m\n'; \
          printf 'Install it first. On macOS run: \033[1mtask deps:install:tools\033[0m\n\n'; \
          exit 1; \
        fi
      - |
        if [ ! -f "{{.CLOUD_INIT}}" ]; then \
          printf '\n\033[1;31m✖ Cloud-init file not found:\033[0m %s\n' "{{.CLOUD_INIT}}"; \
          exit 1; \
        fi
      - |
        set -euo pipefail
        TS=$(date +%y%m%d%H%M%S)
        for i in $(seq 1 {{.COUNT}}); do \
          NAME="{{.PREFIX}}-${TS}-$i"; \
          printf '\n\033[1;36m▶ Launching VM:\033[0m %s (cpus=%s, mem=%s, disk=%s)\n' "$NAME" "{{.CPUS}}" "{{.MEM}}" "{{.DISK}}"; \
          multipass launch --name "$NAME" --cpus {{.CPUS}} --mem {{.MEM}} --disk {{.DISK}} --cloud-init "{{.CLOUD_INIT}}"; \
          multipass info "$NAME" || true; \
        done

  vm:install:macos:
    platforms:
      - darwin
    cmds:
      - brew install multipass
    desc: Install Multipass VM (macOS) via homebrew for local development and integration testing

  vm:install:linux:
    desc: Install Multipass on Linux using snap/apt/dnf (requires sudo)
    platforms:
      - linux
    cmds:
      - |
        if command -v multipass >/dev/null 2>&1; then \
          printf '\n\033[1;32m✓ Multipass already installed.\033[0m\n'; \
          multipass version || true; \
          exit 0; \
        fi
      - |
        set -euo pipefail
        if command -v snap >/dev/null 2>&1; then \
          printf '\n\033[1;36m▶ Installing Multipass via snap...\033[0m\n'; \
          sudo snap install multipass; \
        elif command -v apt-get >/dev/null 2>&1; then \
          printf '\n\033[1;36m▶ Installing Multipass via apt...\033[0m\n'; \
          sudo apt-get update; \
          sudo apt-get install -y multipass || { printf '\n\033[1;33m! Falling back to snap — please install snapd and rerun.\033[0m\n'; exit 1; }; \
        elif command -v dnf >/dev/null 2>&1; then \
          printf '\n\033[1;36m▶ Attempting install via dnf...\033[0m\n'; \
          sudo dnf install -y multipass || { printf '\n\033[1;31m✖ Could not install via dnf. Consider using snap.\033[0m\n'; exit 1; }; \
        else \
          printf '\n\033[1;31m✖ No supported package manager found (snap/apt/dnf).\033[0m\n'; \
          printf 'See installation docs: https://multipass.run/docs/installing-on-linux\n'; \
          exit 1; \
        fi
      - multipass version || true

  vm:purge:
    silent: true
    vars:
      PREFIX: '{{.PREFIX | default "mlox-test"}}'
    cmds:
      - printf '\n\033[1;36m══════════ ▶ BEFORE CLEANUP (Multipass VMs) ◀ ══════════\033[0m\n'; multipass list || true
      - multipass list | grep {{.PREFIX}} | cut -d' ' -f1 | xargs multipass delete $1 --purge
      - printf '\n\033[1;32m══════════ ✓ AFTER CLEANUP (Multipass VMs) ✓ ══════════\033[0m\n'; multipass list || true
    desc: Remove all Multipass VMs starting with the given prefix
